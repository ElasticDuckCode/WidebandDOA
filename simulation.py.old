#!/usr/bin/env python3
import sys
import numpy as np
from numpy import pi, random
from scipy import linalg, fft
from matplotlib import pyplot as plt


def a(theta, f_i, N) -> np.ndarray:
    manifold = np.exp(1j * 2*pi * f_i * np.arange(N) * np.sin(theta))
    return manifold


def A(theta_list, f_i, N) -> np.ndarray:
    K = len(theta_list)
    A = np.zeros([K, N], dtype=complex)
    for i in range(K):
        A[i] = a(theta_list[i], f_i, N)
    return A.T


def generate_measurements() -> None:
    raise NotImplementedError



def main() -> int:
    L = 64                       
    N = 20
    Q = 20
    f_bins = fft.fftshift(1/L * np.arange(L))
    M = [i for i in range(L-15, L)] #[i for i in range(17, 32)]
    print(M)
    K = 7
    theta = np.asarray([-60, -35, -15, 5, 30, 45, 60]) * pi/180
    Y = np.zeros([Q, L, N], dtype=complex)
    for q in range(Q): # snapshots 
        for i, f_i in enumerate(f_bins): # frequencies
            if i in M:
                Y[q, i] = A(theta, f_i, N) @ random.randn(K) #+ 0.01 * random.randn(N) # sensors

    N = 20
    T = L * Q
    Y = np.zeros([N, T], dtype=complex)
    f_grid = 1/T * np.arange(T)
    signal_freq = np.where(np.logical_and(f_grid >= 0.5, f_grid <= 1))[0]

    for i in signal_freq:
        f_i = f_grid[i]
        Y[:, i] = A(theta, f_i, N) @ random.randn(K)
    plt.figure()
    plt.imshow(Y)
    plt.show()

    

    return 0


if __name__ == "__main__":
    sys.exit(main())
